---

# -------------------------------------------------------------------------------------
#  Dynamic update the Ansible inventory with a list of Cisco UCS servers in the cluster.
#  Servers were discovered by Intersight when UCS FIs were claimed as targets in Intersight.
# -------------------------------------------------------------------------------------

- name: Define anchor for Intersight API login info
  ansible.builtin.set_fact:
    intersight_api_login_info: &intersight_api_login_info
      api_private_key: "{{ intersight_api_private_key }}"
      api_key_id: "{{ intersight_api_key_id }}"
      api_uri: "{{ intersight_api_uri | default(omit) }}"
      validate_certs: "{{ intersight_validate_certs | default(omit) }}"
      state: "{{ intersight_state | default(omit) }}"

    # Change filepath if you want to update a different inventory file
    filepath: "{{ inventory_file }}"
    # Change host_group if you want to use another group name for your servers in the created inventory
    host_group: cisco_imm_servers

- name: Update Ansible inventory file with list of UCS servers
  block:
    - name: Find all servers
      cisco.intersight.intersight_info:
        <<: *intersight_api_login_info
        server_names: []
      register: all_results
      tags: intersight_dynamic_inventory_update

    - name: Print list of UCS servers
      ansible.builtin.debug:
        msg: "server name {{ item.Name }}, moid {{ item.Moid }}"
      loop: "{{ intersight_servers }}"
      when: cisco_imm_servers is defined
      tags: never
      # tags: [never, debug, always, intersight_dynamic_inventory_update]

    - name: Print all servers discovered
      ansible.builtin.debug:
        msg: "Intersight servers found are: {{ all_results.intersight_servers }}"
        # msg: "Inventory filepath: {{ filespath }}"
      tags: never
      # tags: [never, debug, always, intersight_dynamic_inventory_update]

    - name: Place the servers in a group in the file
      ansible.builtin.debug:
        msg: Inventory filepath "{{ filepath }}"
      tags: never
      # tags: [never, debug, always, intersight_dynamic_inventory_update]

    - name: Place the servers in a group in the inventory file, create group if it doesn't exists
      ansible.builtin.lineinfile:
        path: "{{ filepath }}"
        line: "[{{ host_group }}]"
        create: true

    - name: Add servers to the file under a group
      ansible.builtin.lineinfile:
        path: "{{ filepath }}"
        insertafter: "^\\[{{ host_group }}\\]"
        regexp: "^{{ item.Name }} serial={{ item.Serial }} "
        # Each line of the inventory has the following:
        # Name server_moid=<Moid value> model=<Model value> boot_policy=<policy from tag> | 'na'
        line: "{{ item.Name }} serial={{ item.Serial }} server_moid={{ item.Moid }} model={{ item.Model }}"
        create: true
      loop: "{{ all_results.intersight_servers }}"
      loop_control:
        label: "{{ item.Name }}"
      when: all_results.intersight_servers is defined

      # # Ansible and jmespath have type differences, so to/from_json used
      # loop: "{{ all_results.intersight_servers |
      #       json_query(platform_query) |
      #       to_json | from_json | json_query(model_query)|
      #       json_query(account_moid_query) |
      #       json_query(oper_state_query)
      #       }}"
      # loop_control:
      #   label: "{{ item.Name }}"
      # vars:
      #   # Filter for UCS FI attached servers
      #   platform_query: "[?PlatformType==['IMCBlade','IMCRack']]"
      #   model_query: "[?contains(Model, 'UCS')]"
      #   account_moid_query: "[?AccountMoid=='611dc01f7564612d331700c4']"
      #   oper_state_query: "[?OperState=='unassociated']"
      #   # add query to narrow it down to the UCSFI in question
      #   #tags_query: "[?[Tags[*].Key!='HX Cluster']]"
      #   #tags_query: "[?Tags[1].Key!='HX Cluster']"
      #   #tags_query: "[?contains(Tags[*].Key, ' ')]"
      # when: all_results.intersight_servers is defined

  delegate_to: localhost
  run_once: true

# -----------------------------------------------------------------------------------------
